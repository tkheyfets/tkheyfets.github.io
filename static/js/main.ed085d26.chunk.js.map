{"version":3,"sources":["WindowPortal.jsx","domUitls.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["props","container","document","createElement","window","children","this","ReactDOM","createPortal","features","toPairs","map","x","join","source","target","toggleWindow","id","open","getFeatures","body","appendChild","title","Array","from","styleSheets","forEach","styleSheet","element","cssRules","cssRule","createTextNode","cssText","href","rel","head","addEventListener","close","React","PureComponent","App","input","state","name","isOpened","event","value","setState","trim","className","type","ref","node","onChange","setName","bind","onClick","toggleChildWindow","call","width","height","left","top","location","src","origin","logo","alt","Component","Boolean","hostname","match","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"gUAaI,WAAaA,GAAQ,IAAD,8BAChB,4CAAMA,KACDC,UAAYC,SAASC,cAAc,OACxC,EAAKC,OAAS,KAHE,E,sEAMT,IACCC,EAAaC,KAAKN,MAAlBK,SACR,OAAOE,IAASC,aAAaH,EAAUC,KAAKL,a,oCAGhC,IACJQ,EAAaH,KAAKN,MAAlBS,SACR,OAAOC,kBAAQD,GACVE,KAAI,SAAAC,GAAC,OAAIA,EAAEC,KAAK,QAChBA,KAAK,O,0CAGQ,IC/BCC,EAAQC,ED+BV,EACYT,KAAKN,MAA1BgB,EADS,EACTA,aAAcC,EADL,EACKA,GACtBX,KAAKF,OAASA,OAAOc,KAAK,GAAID,EAAIX,KAAKa,eACvCb,KAAKF,OAAOF,SAASkB,KAAKC,YAAYf,KAAKL,WAC3CK,KAAKF,OAAOF,SAASoB,MAAQ,eCnCVR,EDoCRV,OAAOF,SCpCSa,EDoCCT,KAAKF,OAAOF,SCnC5CqB,MAAMC,KAAKV,EAAOW,aAAaC,SAAQ,SAAAC,GACnC,IAAMC,EAAUd,EAAOX,cAAcwB,EAAWE,SAAW,QAAU,QACjEF,EAAWE,SACXN,MAAMC,KAAKG,EAAWE,UAAUH,SAAQ,SAAAI,GACpCF,EAAQP,YAAYP,EAAOiB,eAAeD,EAAQE,aAE/CL,EAAWM,OAClBL,EAAQM,IAAM,aACdN,EAAQK,KAAON,EAAWM,MAE9BlB,EAAOoB,KAAKd,YAAYO,MD0BxBtB,KAAKF,OAAOgC,iBAAiB,gBAAgB,kBAAMpB,GAAa,Q,6CAG1CV,KAAKF,OAAOiC,Y,GAlCbC,IAAMC,e,gBEDdC,E,2MACnBC,MAAQ,K,EACRC,MAAQ,CAAEC,KAAM,WAAYC,UAAU,G,uEAC7BC,GAAQ,IACGC,EAAYD,EAAtB9B,OAAU+B,MAEdA,IADaxC,KAAKoC,MAAdC,MACYrC,KAAKyC,SAAS,CAAEJ,KAAMG,EAAME,W,wCAE/BX,GAAQ,IACjBO,EAAatC,KAAKoC,MAAlBE,SACRtC,KAAKyC,SAAS,CAAEH,SAA2B,qBAAVP,GAAyBO,EAAWP,M,0CAGrE,GAAmB,OAAf/B,KAAKmC,MAAgB,CAAC,IAChBE,EAASrC,KAAKoC,MAAdC,KACRrC,KAAKmC,MAAMK,MAAQH,K,+BAGZ,IAAD,SACmBrC,KAAKoC,MAAxBC,EADA,EACAA,KAAMC,EADN,EACMA,SACd,OACE,yBAAKK,UAAU,OACb,4BAAQA,UAAU,cAChB,wCACA,2BAAOC,KAAK,OACLC,IAAK,SAAAC,GAAI,OAAI,EAAKX,MAAQW,GAC1BC,SAAU/C,KAAKgD,QAAQC,KAAKjD,QACnC,4BAAQkD,QAAS,kBAAM,EAAKC,kBAAkBC,KAAK,KAChDd,EAAW,QAAU,OADxB,kBAIDA,EAAW,kBAAC,EAAD,CACR3B,GAAG,cACHD,aAAcV,KAAKmD,kBAAkBF,KAAKjD,MAC1CG,SAAU,CACRkD,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,IAAK,IACLC,SAAU,OAEd,4BAAQd,UAAU,cAChB,yBAAKe,IAAG,UAAK5D,OAAO2D,SAASE,QAArB,OAA8BC,KACjCC,IAAI,OACJlB,UAAU,aACf,uCACW,gCAASN,MAGN,U,GAjDOL,IAAM8B,WCOnBC,QACW,cAA7BjE,OAAO2D,SAASO,UAEe,UAA7BlE,OAAO2D,SAASO,UAEhBlE,OAAO2D,SAASO,SAASC,MACvB,2DCZNhE,IAASiE,OAAO,kBAAC,EAAD,MAAStE,SAASuE,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBErInBC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.ed085d26.chunk.js","sourcesContent":["import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport PropTypes from \"prop-types\"\nimport { copyStyles } from \"./domUitls\"\nimport { toPairs } from \"lodash\"\n\nexport default class extends React.PureComponent {\n    static propTypes = {\n        features: PropTypes.object,\n        toggleWindow: PropTypes.func,\n        id: PropTypes.string.isRequired\n    }\n\n    constructor (props) {\n        super(props)\n        this.container = document.createElement(\"div\")\n        this.window = null\n    }\n\n    render () {\n        const { children } = this.props\n        return ReactDOM.createPortal(children, this.container)\n    }\n\n    getFeatures () {\n        const { features } = this.props\n        return toPairs(features)\n            .map(x => x.join(\"=\"))\n            .join(\",\")\n    }\n\n    componentDidMount () {\n        const { toggleWindow, id } = this.props\n        this.window = window.open(\"\", id, this.getFeatures())\n        this.window.document.body.appendChild(this.container)\n        this.window.document.title = \"Child Window\"\n        copyStyles(window.document, this.window.document)\n        this.window.addEventListener(\"beforeunload\", () => toggleWindow(false))\n    }\n\n    componentWillUnmount () { this.window.close() }\n}\n","export function copyStyles(source, target) {\n    Array.from(source.styleSheets).forEach(styleSheet => {\n        const element = source.createElement(styleSheet.cssRules ? \"style\" : \"link\")\n        if (styleSheet.cssRules) {\n            Array.from(styleSheet.cssRules).forEach(cssRule => {\n                element.appendChild(source.createTextNode(cssRule.cssText))\n            })\n        } else if (styleSheet.href) {\n            element.rel = \"stylesheet\"\n            element.href = styleSheet.href\n        }\n        target.head.appendChild(element)\n    })\n}\n","import React from \"react\"\nimport \"./App.css\"\nimport WindowPortal from \"./WindowPortal\"\nimport logo from \"./logo.svg\"\n\nexport default class App extends React.Component {\n  input = null\n  state = { name: \"John Doe\", isOpened: false }\n  setName (event) {\n    const { target: { value } } = event\n    const { name } = this.state\n    if (value !== name) this.setState({ name: value.trim() })\n  }\n  toggleChildWindow (close) {\n    const { isOpened } = this.state\n    this.setState({ isOpened: typeof close === \"undefined\" ? !isOpened : close })\n  }\n  componentDidMount () {\n    if (this.input !== null) {\n      const { name } = this.state\n      this.input.value = name\n    }\n  }\n  render () {\n    const { name, isOpened } = this.state\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <label>Name:</label>\n          <input type=\"text\"\n                 ref={node => this.input = node}\n                 onChange={this.setName.bind(this)} />\n          <button onClick={() => this.toggleChildWindow.call(this)}>\n            {isOpened ? \"Close\" : \"Open\"} Child Window\n          </button>\n        </header>\n        {isOpened ? <WindowPortal\n            id=\"childWindow\"\n            toggleWindow={this.toggleChildWindow.bind(this)}\n            features={{\n              width: 400,\n              height: 400,\n              left: 300,\n              top: 100,\n              location: \"no\"\n            }}>\n          <header className=\"App-header\">\n            <img src={`${window.location.origin}${logo}`}\n                 alt=\"logo\"\n                 className=\"App-logo\"/>\n            <p>\n              Name is: <strong>{name}</strong>\n            </p>\n          </header>\n        </WindowPortal> : null}\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}